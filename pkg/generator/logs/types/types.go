package types

import (
	"fmt"
	"time"

	"github.com/zyy17/o11ybench/pkg/generator/common"
	"github.com/zyy17/o11ybench/pkg/generator/faker"
)

// LogsGeneratorConfig is the configuration for the logs generator.
type LogsGeneratorConfig struct {
	// Tokens is the list of tokens to be used in the logs.
	Tokens []*LogToken `yaml:"tokens,omitempty"`

	// Format is the format of the logs.
	Format *LogFormat `yaml:"format,omitempty"`

	// Output is the configuration for the output of the logs.
	Output *Output `yaml:"output,omitempty"`
}

// Output is the configuration for the output of the logs. It's only used for `generate` subcommand.
type Output struct {
	// Count is the total number of logs to generate.
	Count int `yaml:"count,omitempty"`

	// Interval is the interval for each log.
	Interval time.Duration `yaml:"interval,omitempty"`
}

// Defaults returns the default configuration for the logs generator.
func (c LogsGeneratorConfig) Defaults() *LogsGeneratorConfig {
	return &LogsGeneratorConfig{
		Output: &Output{
			Count:    1000,
			Interval: time.Second * 1,
		},
	}
}

// Validate validates the configuration for the logs generator.
func (c *LogsGeneratorConfig) Validate() error {
	if c.Format.Custom != "" || c.Format.Type == LogFormatTypeJSON {
		if len(c.Tokens) == 0 {
			return fmt.Errorf("tokens are required when using custom format or JSON format")
		}
	}

	return nil
}

// LogToken is the token that constructs the log message.
type LogToken struct {
	// Name is the internal name of the token. You can use this name in custom format to refer to the token.
	Name string `yaml:"name"`

	// Type is the type of the token.
	Type common.ElementType `yaml:"type"`

	// FakeConfig is the configuration for how to generate the fake data.
	FakeConfig *faker.FakeConfig `yaml:"fake,omitempty"`

	// Display is the final name of the token. It will be used in the fake data output.
	Display string `yaml:"display,omitempty"`

	// Value is the value of the token. If this is set, the value will not be generated by the faker.
	Value any `yaml:"value,omitempty"`
}

// LogFormat is the format of the logs.
type LogFormat struct {
	// Type is the type of the log format.
	Type LogFormatType `yaml:"type"`

	// Custom is the custom format of the log in template syntax.
	Custom string `yaml:"custom,omitempty"`
}

// LogFormatType is the type of the log format.
type LogFormatType string

const (
	// LogFormatTypeApacheCommonLog is the format of apache common log.
	LogFormatTypeApacheCommonLog LogFormatType = "apache_common"

	// LogFormatTypeApacheCombinedLog is the format of apache combined log.
	LogFormatTypeApacheCombinedLog LogFormatType = "apache_combined"

	// LogFormatTypeApacheErrorLog is the format of apache error log.
	LogFormatTypeApacheErrorLog LogFormatType = "apache_error"

	// LogFormatTypeRFC3164 is the format of rfc3164 log.
	LogFormatTypeRFC3164 LogFormatType = "rfc3164"

	// LogFormatTypeRFC5424 is the format of rfc5424 log.
	LogFormatTypeRFC5424 LogFormatType = "rfc5424"

	// LogFormatTypeJSON is the format of JSON.
	LogFormatTypeJSON LogFormatType = "json"
)

// GeneratorOptions is used to control the data volume of the logs. It's only used for Loader.
type GeneratorOptions struct {
	// LogsCount is the number of logs to generate.
	LogsCount int

	// Timestamp is the given timestamp of the log.
	Timestamp time.Time
}
