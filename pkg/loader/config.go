package loader

import (
	"fmt"
	"time"
)

// Config is the configuration for the loader.
type Config struct {
	// Rate is the number of requests that will be made per second.
	Rate int `yaml:"rate"`

	// Workers is the number of workers that will be used to make the requests. Default is `2`.
	Workers int `yaml:"workers,omitempty"`

	// Duration is the duration of the stress test. For example: `1min`.
	// If not set, the test will keep running until the interrupt signal is received.
	Duration time.Duration `yaml:"duration,omitempty"`

	// HTTP is the configuration for the HTTP requests.
	HTTP HTTPConfig `yaml:"http"`

	// Logs is the configuration for controlling the volume of data generated by the LogsGenerator during load testing.
	Logs *LogsGeneratorConfig `yaml:"logs,omitempty"`
}

// LogsGeneratorConfig is the configuration for controlling the volume of data generated by the LogsGenerator during load testing.
type LogsGeneratorConfig struct {
	// RecordsPerRequest is the number of logs to be generated in each request.
	RecordsPerRequest int `yaml:"recordsPerRequest,omitempty"`
}

func (c *LogsGeneratorConfig) validate() error {
	if c.RecordsPerRequest <= 0 {
		return fmt.Errorf("recordsPerRequest must be greater than 0")
	}

	return nil
}

// HTTPConfig is the configuration for the HTTP requests.
type HTTPConfig struct {
	// Host is the host of the target. For example: `127.0.0.1`.
	Host string `yaml:"host"`

	// Port is the port of the target. For example: `4000`.
	Port int `yaml:"port"`

	// URI is the URI of the target. For example: `/api/v1/users`.
	// You can use the template syntax to generate the URI. For example: `/api/v1/users?db={{ .DB }}`. The token should be defined in the generation stage.
	URI string `yaml:"uri"`

	// Method is the HTTP method to use. For example: `POST`.
	Method string `yaml:"method"`

	// Headers is the multiple key-value pairs of the HTTP headers.
	Headers map[string]string `yaml:"headers,omitempty"`

	// Compression is the compression algorithm to use.
	// If not set, the payload will not be compressed. Option available is `gzip`.
	Compression string `yaml:"compression,omitempty"`

	// ResponseHeaderTimeout is the timeout for the response header. Default is `10s`.
	ResponseHeaderTimeout time.Duration `yaml:"responseHeaderTimeout,omitempty"`
}

// Defaults returns the default loader config.
func (c Config) Defaults() *Config {
	return &Config{
		Workers: 2,
		HTTP:    *HTTPConfig{}.defaults(),
	}
}

// Validate validates the configuration.
func (c *Config) Validate() error {
	if c.Rate <= 0 {
		return fmt.Errorf("rate must be greater than 0")
	}

	if c.Workers <= 0 {
		return fmt.Errorf("workers must be greater than 0")
	}

	if err := c.HTTP.validate(); err != nil {
		return err
	}

	if c.Logs == nil {
		return fmt.Errorf("logs generator config for loader is required")
	}

	if err := c.Logs.validate(); err != nil {
		return fmt.Errorf("invalid logs generator config: %w", err)
	}

	return nil
}

func (c *HTTPConfig) validate() error {
	if c.Host == "" {
		return fmt.Errorf("host is required")
	}

	if c.Port == 0 {
		return fmt.Errorf("port is required")
	}

	if c.URI == "" {
		return fmt.Errorf("uri is required")
	}

	if c.Method == "" {
		return fmt.Errorf("method is required")
	}

	if c.Compression != "" && c.Compression != "gzip" {
		return fmt.Errorf("only gzip compression is supported")
	}

	return nil
}

func (c HTTPConfig) defaults() *HTTPConfig {
	return &HTTPConfig{
		ResponseHeaderTimeout: 10 * time.Second,
	}
}
